name: 0.2.$(Rev:r)

resources:
  repositories:
    - repository: templates
      type: github
      name: jamesrcounts/devops-governance
      endpoint: 'GithHub Personal Access Token'
      ref: refs/tags/2021.06

trigger:
  batch: true
  branches:
    include:
      - main
      - lz
  paths:
    include:
      - infrastructure/appenv
    exclude:
      - infrastructure/appenv/azure-pipelines.yml
pr:
  autoCancel: true
  drafts: true
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: key-vault
  - group: terraform-backend
  - group: terraform-version
  - name: project_folder
    value: infrastructure/appenv

stages:
  - stage: plan
    displayName: 'Plan Infrastructure'

    jobs:
      - job: plan
        displayName: 'Infrastructure Plan'
        variables:
          - name: TF_STORAGE_BLOB_NAME
            value: 'appenv.tfstate'
        steps:
          - checkout: self
            fetchDepth: 1

          - template: pipeline-templates/prepare-credentials.yml@templates
          - template: pipeline-templates/pin-terraform.yml@templates
          - template: pipeline-templates/terraform-init.yml@templates

          - task: Bash@3
            name: 'terraform_plan'
            displayName: 'Terraform Plan'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
            inputs:
              targetType: 'inline'
              workingDirectory: $(project_folder)
              script: |
                set -euo pipefail

                if [ ${BUILD_REASON} == 'PullRequest' ]; then
                  export TF_CLI_ARGS="-lock=false"
                fi

                terraform plan \
                  -input=false \
                  -var "backend_resource_group_name=${KEYVAULT_RESOURCE_GROUP_NAME}" \
                  -out ${BUILD_BUILDNUMBER}.tfplan

          - template: pipeline-templates/publish-plan.yml@templates

  - stage: deploy
    displayName: 'Deploy Infrastructure'
    jobs:
      - deployment: terraform
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Change Infrastructure'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: pipeline-templates/extract-plan.yml@templates
                - template: pipeline-templates/prepare-credentials.yml@templates
                - template: pipeline-templates/pin-terraform.yml@templates

                - task: Bash@3
                  displayName: 'Terraform Apply'
                  env:
                    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
                    ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
                    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
                    ARM_TENANT_ID: $(AZURE_TENANT_ID)
                    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
                  inputs:
                    targetType: 'inline'
                    workingDirectory: $(project_folder)
                    script: |
                      set -euo pipefail
      
                      terraform apply \
                        -input=false \
                        ${BUILD_BUILDNUMBER}.tfplan